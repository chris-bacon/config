
==================== FINAL INTERFACE ====================
2019-03-17 23:03:59.683488005 UTC

interface main:HaskellFormatImport.Plugin 8064
  interface hash: 6ea46dec3a15dcf5d6d4a60e797b6ecb
  ABI hash: 54e506215abce7e72974d2039fe8f42d
  export-list hash: c27d7044e521c125cd142499fea23d93
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e5fd15702f15e2b7fd2f13ad10fcf15d
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  HaskellFormatImport.Plugin.haskellFormatImport
module dependencies:
package dependencies: ansi-terminal-0.9 ansi-wl-pprint-0.6.8.2
                      array-0.5.3.0 async-2.2.1 base-4.12.0.0 basement-0.0.10
                      binary-0.8.6.0 bytestring-0.10.8.2 case-insensitive-1.2.0.11
                      cereal-0.5.8.0 cereal-conduit-0.8.0 colour-2.3.4 conduit-1.3.1.1
                      containers-0.6.0.1 data-default-0.7.1.1 data-default-class-0.1.2.0
                      data-default-instances-containers-0.0.1
                      data-default-instances-dlist-0.0.1
                      data-default-instances-old-locale-0.0.1 deepseq-1.4.4.0
                      directory-1.3.3.0 dlist-0.8.0.5 exceptions-0.10.0 filepath-1.4.2.1
                      ghc-boot-th-8.6.4 ghc-prim-0.5.3 hashable-1.2.7.0 hslogger-1.2.12
                      integer-gmp-1.0.2.0 megaparsec-7.0.4 messagepack-0.5.4
                      mono-traversable-1.0.11.0 mtl-2.2.2 network-2.8.0.0 nvim-hs-2.0.0.0
                      old-locale-1.0.0.7 optparse-applicative-0.14.3.0
                      parser-combinators-1.0.1 pretty-1.1.3.6 prettyprinter-1.2.1
                      prettyprinter-ansi-terminal-1.1.1.2 primitive-0.6.4.0
                      process-1.6.5.0 random-1.1 resourcet-1.2.2 split-0.2.3.3
                      stm-2.5.0.0 streaming-commons-0.2.1.0 template-haskell-2.14.0.0
                      text-1.2.3.1 time-1.8.0.2 time-locale-compat-0.1.1.5
                      transformers-0.5.6.2 typed-process-0.2.4.0 unix-2.7.2.2
                      unliftio-0.2.10 unliftio-core-0.1.2.0 unordered-containers-0.2.10.0
                      utf8-string-1.0.1.1 vector-0.12.0.2 vector-algorithms-0.8.0.1
orphans: network-2.8.0.0:Network.Socket
         vector-0.12.0.2:Data.Vector.Unboxed
         hashable-1.2.7.0:Data.Hashable.Generic colour-2.3.4:Data.Colour
         data-default-instances-containers-0.0.1:Data.Default.Instances.Containers
         data-default-instances-dlist-0.0.1:Data.Default.Instances.DList
         data-default-instances-old-locale-0.0.1:Data.Default.Instances.OldLocale
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.5.0.0:Control.Monad.STM text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.5:Data.DList ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         megaparsec-7.0.4:Text.Megaparsec.Error
                         megaparsec-7.0.4:Text.Megaparsec.Pos
                         megaparsec-7.0.4:Text.Megaparsec.State
                         megaparsec-7.0.4:Text.Megaparsec.Stream
                         messagepack-0.5.4:Data.MessagePack
                         mono-traversable-1.0.11.0:Data.MonoTraversable
                         mono-traversable-1.0.11.0:Data.NonNull
                         mono-traversable-1.0.11.0:Data.Sequences
                         nvim-hs-2.0.0.0:Neovim.API.String
                         nvim-hs-2.0.0.0:Neovim.Plugin.Classes
                         nvim-hs-2.0.0.0:Neovim.Plugin.IPC.Classes
                         nvim-hs-2.0.0.0:Neovim.RPC.Classes
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         prettyprinter-1.2.1:Data.Text.Prettyprint.Doc.Internal
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unliftio-0.2.10:UnliftIO.Internals.Async
                         unordered-containers-0.2.10.0:Data.HashMap.Base
                         unordered-containers-0.2.10.0:Data.HashSet.Base
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  base-4.12.0.0:Data.List 17d0c71c557e42abe196f130788fd997
import  -/  base-4.12.0.0:Data.Maybe 9b76a39e833465c3c5b3c078b431417f
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  basement-0.0.10:Basement.IntegralConv b564bac3f10442314e727edb382f972a
import  -/  basement-0.0.10:Basement.Numerical.Conversion a6f6ce9081650ab9260863398fa46308
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  nvim-hs-2.0.0.0:Neovim 167669be48234d69ad1483fe71c0a30e
import  -/  nvim-hs-2.0.0.0:Neovim.API.String 4474be69165bb942195ccd71d4889400
import  -/  nvim-hs-2.0.0.0:Neovim.Context.Internal 18ef550ed059bc886ea89ec66dd281a9
import  -/  nvim-hs-2.0.0.0:Neovim.Plugin.Classes 5f7806180d205a1bc6ed8262ba857416
import  -/  text-1.2.3.1:Data.Text 1e51a010d8f8a6fa41d8ea82d69faf13
import  -/  text-1.2.3.1:Data.Text.IO 04a90de6b55e7446693a989e9de89740
import  -/  text-1.2.3.1:Data.Text.Internal 537e168590e8068f673f691833f78483
9f6e8e0935c6706526c4c0df05aeeec2
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   HaskellFormatImport.Plugin.$trModule3
                   HaskellFormatImport.Plugin.$trModule1) -}
51df5fa17329e20f4c56d6775ea93e9c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   HaskellFormatImport.Plugin.$trModule2) -}
f46027bce452875ca89866e3631856a2
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HaskellFormatImport.Plugin"#) -}
b2c11148c6bdef36ff18af5c9c3f279c
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   HaskellFormatImport.Plugin.$trModule4) -}
4824184062f25fc178cbebd522ff61e6
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
da3fbbb580d6b7540516c5fd21c6fe16
  $whaskellFormatImport ::
    GHC.Maybe.Maybe (GHC.Types.Int, GHC.Types.Int)
    -> GHC.IORef.IORef Control.Monad.Trans.Resource.Internal.ReleaseMap
    -> Neovim.Context.Internal.Config env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U(U,U),U,U,U,U,U,U)><S,U>,
     Inline: [2],
     Unfolding: (\ @ env
                   (ww :: GHC.Maybe.Maybe (GHC.Types.Int, GHC.Types.Int))
                   (w :: GHC.IORef.IORef
                           Control.Monad.Trans.Resource.Internal.ReleaseMap)
                   (w1 :: Neovim.Context.Internal.Config env)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Neovim.RPC.FunctionCall.$wacall
                        @ Neovim.API.String.Buffer
                        @ env
                        Neovim.API.String.$fNvimObjectBuffer
                        Neovim.API.String.vim_get_current_buffer3
                          `cast`
                        (Sym (Neovim.Plugin.Classes.N:FunctionName[0]))
                        (GHC.Types.[] @ Data.MessagePack.Object)
                        w1
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.atomically#
                        @ (Data.Either.Either
                             Neovim.Exceptions.NeovimException Neovim.API.String.Buffer)
                        ipv1
                          `cast`
                        (GHC.Conc.Sync.N:STM[0]
                             <Data.Either.Either
                                Neovim.Exceptions.NeovimException Neovim.API.String.Buffer>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Neovim.RPC.FunctionCall.$wacall
                        @ [GHC.Base.String]
                        @ env
                        Neovim.API.String.$s$fNvimObject[]1
                        Neovim.API.String.nvim_buf_get_lines3
                          `cast`
                        (Sym (Neovim.Plugin.Classes.N:FunctionName[0]))
                        (GHC.Types.:
                           @ Data.MessagePack.Object
                           (case ipv3 of wild {
                              Data.Either.Left x1
                              -> case Neovim.API.String.vim_get_current_buffer2
                                 ret_ty Data.MessagePack.Object
                                 of {}
                              Data.Either.Right y
                              -> case y of wild1 { Neovim.API.String.Buffer bs ->
                                 Data.MessagePack.ObjectExt 0# bs } })
                           (GHC.Types.:
                              @ Data.MessagePack.Object
                              (Data.MessagePack.ObjectInt
                                 (case ww of wild {
                                    GHC.Maybe.Nothing
                                    -> HaskellFormatImport.Plugin.haskellFormatImport11
                                    GHC.Maybe.Just v
                                    -> case v of wild1 { (,) a b ->
                                       case a of wild2 { GHC.Types.I# i -> GHC.Int.I64# i } } }))
                              (GHC.Types.:
                                 @ Data.MessagePack.Object
                                 (Data.MessagePack.ObjectInt
                                    (case ww of wild {
                                       GHC.Maybe.Nothing
                                       -> HaskellFormatImport.Plugin.haskellFormatImport11
                                       GHC.Maybe.Just v
                                       -> case v of wild1 { (,) a b ->
                                          case b of wild2 { GHC.Types.I# i -> GHC.Int.I64# i } } }))
                                 HaskellFormatImport.Plugin.haskellFormatImport9)))
                        w1
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.atomically#
                        @ (Data.Either.Either
                             Neovim.Exceptions.NeovimException [GHC.Base.String])
                        ipv5
                          `cast`
                        (GHC.Conc.Sync.N:STM[0]
                             <Data.Either.Either
                                Neovim.Exceptions.NeovimException [GHC.Base.String]>_R)
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 (((Neovim.API.String.nvim_buf_set_lines
                      (case ipv3 of wild {
                         Data.Either.Left x1 -> Neovim.API.String.vim_get_current_buffer2
                         Data.Either.Right y -> y })
                      HaskellFormatImport.Plugin.haskellFormatImport11
                      HaskellFormatImport.Plugin.haskellFormatImport8
                      GHC.Types.False
                      HaskellFormatImport.Plugin.haskellFormatImport2
                      @ env)
                     `cast`
                   (Neovim.Context.Internal.N:Neovim[0]
                        <env>_R <()>_N ; Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                             <Control.Monad.Trans.Reader.ReaderT
                                                (Neovim.Context.Internal.Config env) GHC.Types.IO>_R
                                             <()>_N)
                     w)
                    `cast`
                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                       <Neovim.Context.Internal.Config env>_R <GHC.Types.IO>_R <()>_N)
                    w1)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   ipv6 } } } }) -}
05aa6523d456df6cae7155b21b77fe1f
  haskellFormatImport ::
    Neovim.Plugin.Classes.CommandArguments
    -> Neovim.Context.Internal.Neovim env ()
  {- Arity: 4,
     Strictness: <S,1*U(A,U,A,A)><L,U><L,U(U(U,U),U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                HaskellFormatImport.Plugin.haskellFormatImport1
                  `cast`
                (forall (env :: <*>_N).
                 <Neovim.Plugin.Classes.CommandArguments>_R
                 ->_R (<GHC.IORef.IORef
                          Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                       ->_R (<Neovim.Context.Internal.Config env>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <()>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                               <Neovim.Context.Internal.Config
                                                                  env>_R
                                                               <GHC.Types.IO>_R
                                                               <()>_N)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                    <Control.Monad.Trans.Reader.ReaderT
                                                                                       (Neovim.Context.Internal.Config
                                                                                          env)
                                                                                       GHC.Types.IO>_R
                                                                                    <()>_N) ; Sym (Neovim.Context.Internal.N:Neovim[0]
                                                                                                       <env>_R) <()>_N)) -}
bc8028a1d4f23d7cb294f6f8ee7828e4
  haskellFormatImport1 ::
    Neovim.Plugin.Classes.CommandArguments
    -> GHC.IORef.IORef Control.Monad.Trans.Resource.Internal.ReleaseMap
    -> Neovim.Context.Internal.Config env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <S,1*U(A,U,A,A)><L,U><L,U(U(U,U),U,U,U,U,U,U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ env
                   (w :: Neovim.Plugin.Classes.CommandArguments)
                   (w1 :: GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap)
                   (w2 :: Neovim.Context.Internal.Config env)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Neovim.Plugin.Classes.CommandArguments ww1 ww2 ww3 ww4 ->
                 HaskellFormatImport.Plugin.$whaskellFormatImport
                   @ env
                   ww2
                   w1
                   w2
                   w3 }) -}
e173a9ad28e94629c5266684cc90eca3
  haskellFormatImport10 :: Data.MessagePack.Object
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (Data.MessagePack.ObjectBool GHC.Types.False) -}
8a3f7d0b2cae0dfb57c3a8757dded22e
  haskellFormatImport11 :: GHC.Int.Int64
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Int.I64# 0#) -}
14d3dc9853f17fcc65e7b30d8e058e21
  haskellFormatImport2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   HaskellFormatImport.Plugin.haskellFormatImport6
                   HaskellFormatImport.Plugin.haskellFormatImport3) -}
0b0ea2989e1857e7d71f1d478b3b8dd8
  haskellFormatImport3 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   HaskellFormatImport.Plugin.haskellFormatImport4
                   (GHC.Types.[] @ GHC.Base.String)) -}
71b7b16060bb89b37c511754e5848529
  haskellFormatImport4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   HaskellFormatImport.Plugin.haskellFormatImport5) -}
e911794261567b7a64a773894210427b
  haskellFormatImport5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("yo"#) -}
fa949980d95e618e29495c95f090f9d6
  haskellFormatImport6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   HaskellFormatImport.Plugin.haskellFormatImport7) -}
15c2e4b9706f88b7a7f0adee794a7f1c
  haskellFormatImport7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("bob"#) -}
d5650b232264b79afa6b733720326d3f
  haskellFormatImport8 :: GHC.Int.Int64
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Int.I64# 5#) -}
25693a27359a1a406289c9e278d962e2
  haskellFormatImport9 :: [Data.MessagePack.Object]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.MessagePack.Object
                   HaskellFormatImport.Plugin.haskellFormatImport10
                   (GHC.Types.[] @ Data.MessagePack.Object)) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

